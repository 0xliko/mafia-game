#!/usr/bin/env node

/**
 * Module dependencies.
 */

var dotenv = require('dotenv').config();
var fs = require('fs');
var app = require('../app');
var sockets = require('../game/sockets');
var debug = require('debug')('discordauth:server');
var http = require('http');
var path = require('path');
var io = require('socket.io');
var db = require('../db/db');
var updateRoles = require('../roleData.js');
var chronJobs = require('../chronJobs.js');
var server;

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Start server once db connection is initialized
 */

db.once('open', function () {
    /**
     * Create HTTP server.
     */

    server = http.createServer(app);

    /**
     * Listen on provided port, on all network interfaces.
     */

    server.listen(port);
    server.on('error', onError);
    server.on('listening', onListening);

    /**
    * Set up websockets
    */

    sockets(io(server));

    /**
    * Update roles in database
    */
    updateRoles();

    /**
    * Start chron jobs
    */
    chronJobs();
});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

process
    .on('unhandledRejection', (reason, p) => {
        console.error(reason, 'Unhandled Rejection at Promise', p);
        fs.writeFileSync(path.join(__dirname, 'logs/unhandledRejection.txt'), `${reason} : ${p}`);
    })
    .on('uncaughtException', err => {
        console.error(err, 'Uncaught Exception thrown');
        fs.writeFileSync(path.join(__dirname, 'logs/uncaughtException.txt'), err);
        process.exit(1);
    });
